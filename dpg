#!/usr/bin/env python3

import abc
import base64
import hashlib
import re
import argparse

# Global vars
CHUNK_SIZE = 3
CHUNKS_NUMBER = 5


class AbstractGenerator(abc.ABC):
    @property
    @abc.abstractproperty
    def username(self):
        raise NotImplementedError()

    @username.setter
    @abc.abstractproperty
    def username(self, username):
        raise NotImplementedError()

    @property
    @abc.abstractproperty
    def service(self):
        raise NotImplementedError()

    @service.setter
    @abc.abstractproperty
    def service(self, service):
        raise NotImplementedError()

    @property
    @abc.abstractproperty
    def counter(self):
        raise NotImplementedError()

    @counter.setter
    @abc.abstractproperty
    def counter(self, counter):
        raise NotImplementedError()

    def generate(self, passphrase):
        source = ("%s:%s:%d:%s") % (
            self.username,
            passphrase,
            self.counter,
            self.service,
        )
        h = hashlib.sha256()
        h.update(bytes(source, "utf8"))
        e = re.sub(r"[^0-9A-Za-z]", "", base64.b64encode(h.digest()).decode())
        return "".join(
            [
                e[i: i + CHUNK_SIZE]
                for i in range(0, CHUNK_SIZE * CHUNKS_NUMBER, CHUNK_SIZE)
            ]
        )


class GenericGenerator(AbstractGenerator):

    _username = "none"
    _service = "none"
    _counter = 0

    @property
    def username(self):
        return self._username

    @username.setter
    def username(self, username):
        self._username = username

    @property
    def service(self):
        return self._service

    @service.setter
    def service(self, service):
        self._service = service

    @property
    def counter(self):
        return self._counter

    @counter.setter
    def counter(self, counter):
        self._counter = counter


def main():
    p = argparse.ArgumentParser()
    p.add_argument("-u", "--username", required=True, help="Username")

    p.add_argument("-s", "--service", required=True, help="Service")

    p.add_argument("-c", "--counter", type=int, default=0, help="Counter")

    p.add_argument("-p", "--passphrase", required=True, help="Passphrase")

    args = p.parse_args()
    g = GenericGenerator()

    g.username = args.username
    g.service = args.service
    g.counter = args.counter

    password = g.generate(args.passphrase)

    if password:
        print(password)


if __name__ == "__main__":
    main()
